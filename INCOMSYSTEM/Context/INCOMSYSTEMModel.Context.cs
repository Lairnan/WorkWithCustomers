//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace INCOMSYSTEM.Context
{
    using INCOMSYSTEM.Windows;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Validation;
    using System.Linq;
    using System.Windows;

    public partial class INCOMSYSTEMEntities : DbContext
    {
        public INCOMSYSTEMEntities()
            : base("name=INCOMSYSTEMEntities")
        {
        }

        public override int SaveChanges()
        {
            var changes = ChangeTracker.Entries()
                .Where(s => s.State == EntityState.Added
                || s.State == EntityState.Modified
                || s.State == EntityState.Deleted)
                .ToList();

            foreach (var change in changes)
            {
                if (change.Entity.GetType().Name.ToLower().Trim().Contains("messages")) return base.SaveChanges();

                if (change.State == EntityState.Added)
                {
                    var history = new UpdatesHistory();
                    history.tableName = change.Entity.GetType().Name.Split('_')[0];
                    if (history.tableName == "UsersDetail" || history.tableName == "Customers" || history.tableName == "Employees")
                        history.idRecord = (long)change.Entity.GetType().GetProperty("idUser").GetValue(change.Entity, null);
                    else if (history.tableName == "Chats") history.idRecord = (long)change.Entity.GetType().GetProperty("idChat").GetValue(change.Entity, null);
                    else history.idRecord = (long)change.Entity.GetType().GetProperty("id").GetValue(change.Entity, null);
                    history.field = "new";
                    history.oldValue = null;
                    history.newValue = null;
                    if (MainWindow.AuthUser == null)
                        history.idUser = null;
                    else history.idUser = MainWindow.AuthUser.idUser;
                    history.dateUpdate = DateTime.Now;
                    history.idStatus = 1;

                    UpdatesHistory.Add(history);

                    continue;
                }

                foreach (var propertyName in change.CurrentValues.PropertyNames)
                {
                    if (propertyName == "isOnline" || change.Entity.GetType() == null) return base.SaveChanges();

                    var originalValue = change.OriginalValues[propertyName];
                    var currentValue = change.CurrentValues[propertyName];

                    if (change.State == EntityState.Added || !Equals(originalValue, currentValue))
                    {
                        var history = new UpdatesHistory();
                        history.tableName = change.Entity.GetType().Name.Split('_')[0];
                        if (history.tableName == "UsersDetail" || history.tableName == "Customers" || history.tableName == "Employees")
                            history.idRecord = (long)change.Entity.GetType().GetProperty("idUser").GetValue(change.Entity, null);
                        else if (history.tableName == "Chats") history.idRecord = (long)change.Entity.GetType().GetProperty("idChat").GetValue(change.Entity, null);
                        else history.idRecord = (long)change.Entity.GetType().GetProperty("id").GetValue(change.Entity, null);
                        history.field = propertyName;
                        history.oldValue = originalValue == null ? null : originalValue.ToString();
                        history.newValue = currentValue == null ? null : currentValue.ToString();
                        history.idUser = MainWindow.AuthUser.idUser;
                        history.dateUpdate = DateTime.Now;
                        history.idStatus = (byte)(change.State == EntityState.Modified ? 2 : 3);

                        UpdatesHistory.Add(history);
                    }
                }
            }

            try
            {
                return base.SaveChanges();
            }
            catch (DbEntityValidationException ex)
            {
                var errorMessages = ex.EntityValidationErrors
                    .SelectMany(x => x.ValidationErrors)
                    .Select(x => x.ErrorMessage);

                var errorMessage = string.Join("\n", errorMessages);

                MessageBox.Show($"Ошибка валидации:\n\n{errorMessage}", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);

                throw;
            }
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Chats> Chats { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<HistoryUploaded> HistoryUploaded { get; set; }
        public virtual DbSet<LegalForms> LegalForms { get; set; }
        public virtual DbSet<Messages> Messages { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OrderStages> OrderStages { get; set; }
        public virtual DbSet<Positions> Positions { get; set; }
        public virtual DbSet<Specializations> Specializations { get; set; }
        public virtual DbSet<SpecializationsEmployee> SpecializationsEmployee { get; set; }
        public virtual DbSet<Statuses> Statuses { get; set; }
        public virtual DbSet<StatusesUpdate> StatusesUpdate { get; set; }
        public virtual DbSet<Tasks> Tasks { get; set; }
        public virtual DbSet<TaskStages> TaskStages { get; set; }
        public virtual DbSet<TypesStage> TypesStage { get; set; }
        public virtual DbSet<UpdatesHistory> UpdatesHistory { get; set; }
        public virtual DbSet<UsersDetail> UsersDetail { get; set; }
    }
}
